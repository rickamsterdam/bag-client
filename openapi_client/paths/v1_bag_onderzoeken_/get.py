# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from openapi_client.model.paginated_bagonderzoeken_list import PaginatedBagonderzoekenList

from . import path

# Query params
CountSchema = schemas.BoolSchema
ExpandSchema = schemas.BoolSchema
ExpandScopeSchema = schemas.StrSchema
FieldsSchema = schemas.StrSchema


class FormatSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "json": "JSON",
            "csv": "CSV",
            "geojson": "GEOJSON",
        }
    
    @schemas.classproperty
    def JSON(cls):
        return cls("json")
    
    @schemas.classproperty
    def CSV(cls):
        return cls("csv")
    
    @schemas.classproperty
    def GEOJSON(cls):
        return cls("geojson")
PageSizeSchema = schemas.IntSchema
SortSchema = schemas.StrSchema
BeginGeldigheidSchema = schemas.DateTimeSchema
BeginGeldigheidGtSchema = schemas.DateTimeSchema
BeginGeldigheidGteSchema = schemas.DateTimeSchema


class BeginGeldigheidInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.DateTimeSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, datetime, ]], typing.List[typing.Union[MetaOapg.items, str, datetime, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'BeginGeldigheidInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
BeginGeldigheidIsnullSchema = schemas.BoolSchema
BeginGeldigheidLtSchema = schemas.DateTimeSchema
BeginGeldigheidLteSchema = schemas.DateTimeSchema


class BeginGeldigheidNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.DateTimeSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, datetime, ]], typing.List[typing.Union[MetaOapg.items, str, datetime, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'BeginGeldigheidNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
DocumentdatumSchema = schemas.DateSchema
DocumentdatumGtSchema = schemas.DateSchema
DocumentdatumGteSchema = schemas.DateSchema


class DocumentdatumInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.DateSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, date, ]], typing.List[typing.Union[MetaOapg.items, str, date, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DocumentdatumInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
DocumentdatumIsnullSchema = schemas.BoolSchema
DocumentdatumLtSchema = schemas.DateSchema
DocumentdatumLteSchema = schemas.DateSchema


class DocumentdatumNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.DateSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, date, ]], typing.List[typing.Union[MetaOapg.items, str, date, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DocumentdatumNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
DocumentnummerSchema = schemas.StrSchema


class DocumentnummerInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DocumentnummerInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
DocumentnummerIsemptySchema = schemas.BoolSchema
DocumentnummerIsnullSchema = schemas.BoolSchema
DocumentnummerLikeSchema = schemas.StrSchema


class DocumentnummerNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DocumentnummerNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
EindGeldigheidSchema = schemas.DateTimeSchema
EindGeldigheidGtSchema = schemas.DateTimeSchema
EindGeldigheidGteSchema = schemas.DateTimeSchema


class EindGeldigheidInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.DateTimeSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, datetime, ]], typing.List[typing.Union[MetaOapg.items, str, datetime, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'EindGeldigheidInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
EindGeldigheidIsnullSchema = schemas.BoolSchema
EindGeldigheidLtSchema = schemas.DateTimeSchema
EindGeldigheidLteSchema = schemas.DateTimeSchema


class EindGeldigheidNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.DateTimeSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, datetime, ]], typing.List[typing.Union[MetaOapg.items, str, datetime, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'EindGeldigheidNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
EindRegistratieSchema = schemas.DateTimeSchema
EindRegistratieGtSchema = schemas.DateTimeSchema
EindRegistratieGteSchema = schemas.DateTimeSchema


class EindRegistratieInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.DateTimeSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, datetime, ]], typing.List[typing.Union[MetaOapg.items, str, datetime, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'EindRegistratieInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
EindRegistratieIsnullSchema = schemas.BoolSchema
EindRegistratieLtSchema = schemas.DateTimeSchema
EindRegistratieLteSchema = schemas.DateTimeSchema


class EindRegistratieNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.DateTimeSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, datetime, ]], typing.List[typing.Union[MetaOapg.items, str, datetime, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'EindRegistratieNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
GeldigOpSchema = schemas.DateTimeSchema
GeldigOpGtSchema = schemas.DateTimeSchema
GeldigOpGteSchema = schemas.DateTimeSchema
GeldigOpInSchema = schemas.DateTimeSchema
GeldigOpIsnullSchema = schemas.DateTimeSchema
GeldigOpLtSchema = schemas.DateTimeSchema
GeldigOpLteSchema = schemas.DateTimeSchema
GeldigOpNotSchema = schemas.DateTimeSchema
IdSchema = schemas.StrSchema


class IdInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IdInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
IdIsemptySchema = schemas.BoolSchema
IdIsnullSchema = schemas.BoolSchema
IdLikeSchema = schemas.StrSchema


class IdNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IdNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
IdentificatieSchema = schemas.StrSchema


class IdentificatieInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IdentificatieInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
IdentificatieIsemptySchema = schemas.BoolSchema
IdentificatieIsnullSchema = schemas.BoolSchema
IdentificatieLikeSchema = schemas.StrSchema


class IdentificatieNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IdentificatieNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
InOnderzoekSchema = schemas.StrSchema


class InOnderzoekInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'InOnderzoekInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
InOnderzoekIsemptySchema = schemas.BoolSchema
InOnderzoekIsnullSchema = schemas.BoolSchema
InOnderzoekLikeSchema = schemas.StrSchema


class InOnderzoekNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'InOnderzoekNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
KenmerkSchema = schemas.StrSchema


class KenmerkInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'KenmerkInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
KenmerkIsemptySchema = schemas.BoolSchema
KenmerkIsnullSchema = schemas.BoolSchema
KenmerkLikeSchema = schemas.StrSchema


class KenmerkNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'KenmerkNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
ObjectIdentificatieSchema = schemas.StrSchema


class ObjectIdentificatieInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ObjectIdentificatieInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
ObjectIdentificatieIsemptySchema = schemas.BoolSchema
ObjectIdentificatieIsnullSchema = schemas.BoolSchema
ObjectIdentificatieLikeSchema = schemas.StrSchema


class ObjectIdentificatieNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ObjectIdentificatieNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
ObjecttypeSchema = schemas.StrSchema


class ObjecttypeInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ObjecttypeInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
ObjecttypeIsemptySchema = schemas.BoolSchema
ObjecttypeIsnullSchema = schemas.BoolSchema
ObjecttypeLikeSchema = schemas.StrSchema


class ObjecttypeNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ObjecttypeNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
PageSchema = schemas.IntSchema
RegistratiedatumSchema = schemas.DateTimeSchema
RegistratiedatumGtSchema = schemas.DateTimeSchema
RegistratiedatumGteSchema = schemas.DateTimeSchema


class RegistratiedatumInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.DateTimeSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, datetime, ]], typing.List[typing.Union[MetaOapg.items, str, datetime, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RegistratiedatumInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
RegistratiedatumIsnullSchema = schemas.BoolSchema
RegistratiedatumLtSchema = schemas.DateTimeSchema
RegistratiedatumLteSchema = schemas.DateTimeSchema


class RegistratiedatumNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.DateTimeSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, datetime, ]], typing.List[typing.Union[MetaOapg.items, str, datetime, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RegistratiedatumNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
TijdstipRegistratieSchema = schemas.DateTimeSchema
TijdstipRegistratieGtSchema = schemas.DateTimeSchema
TijdstipRegistratieGteSchema = schemas.DateTimeSchema


class TijdstipRegistratieInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.DateTimeSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, datetime, ]], typing.List[typing.Union[MetaOapg.items, str, datetime, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TijdstipRegistratieInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
TijdstipRegistratieIsnullSchema = schemas.BoolSchema
TijdstipRegistratieLtSchema = schemas.DateTimeSchema
TijdstipRegistratieLteSchema = schemas.DateTimeSchema


class TijdstipRegistratieNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.DateTimeSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, datetime, ]], typing.List[typing.Union[MetaOapg.items, str, datetime, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TijdstipRegistratieNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
VolgnummerSchema = schemas.IntSchema
VolgnummerGtSchema = schemas.IntSchema
VolgnummerGteSchema = schemas.IntSchema


class VolgnummerInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.IntSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'VolgnummerInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
VolgnummerIsnullSchema = schemas.BoolSchema
VolgnummerLtSchema = schemas.IntSchema
VolgnummerLteSchema = schemas.IntSchema


class VolgnummerNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.IntSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'VolgnummerNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        '_count': typing.Union[CountSchema, bool, ],
        '_expand': typing.Union[ExpandSchema, bool, ],
        '_expandScope': typing.Union[ExpandScopeSchema, str, ],
        '_fields': typing.Union[FieldsSchema, str, ],
        '_format': typing.Union[FormatSchema, str, ],
        '_pageSize': typing.Union[PageSizeSchema, decimal.Decimal, int, ],
        '_sort': typing.Union[SortSchema, str, ],
        'beginGeldigheid': typing.Union[BeginGeldigheidSchema, str, datetime, ],
        'beginGeldigheid[gt]': typing.Union[BeginGeldigheidGtSchema, str, datetime, ],
        'beginGeldigheid[gte]': typing.Union[BeginGeldigheidGteSchema, str, datetime, ],
        'beginGeldigheid[in]': typing.Union[BeginGeldigheidInSchema, list, tuple, ],
        'beginGeldigheid[isnull]': typing.Union[BeginGeldigheidIsnullSchema, bool, ],
        'beginGeldigheid[lt]': typing.Union[BeginGeldigheidLtSchema, str, datetime, ],
        'beginGeldigheid[lte]': typing.Union[BeginGeldigheidLteSchema, str, datetime, ],
        'beginGeldigheid[not]': typing.Union[BeginGeldigheidNotSchema, list, tuple, ],
        'documentdatum': typing.Union[DocumentdatumSchema, str, date, ],
        'documentdatum[gt]': typing.Union[DocumentdatumGtSchema, str, date, ],
        'documentdatum[gte]': typing.Union[DocumentdatumGteSchema, str, date, ],
        'documentdatum[in]': typing.Union[DocumentdatumInSchema, list, tuple, ],
        'documentdatum[isnull]': typing.Union[DocumentdatumIsnullSchema, bool, ],
        'documentdatum[lt]': typing.Union[DocumentdatumLtSchema, str, date, ],
        'documentdatum[lte]': typing.Union[DocumentdatumLteSchema, str, date, ],
        'documentdatum[not]': typing.Union[DocumentdatumNotSchema, list, tuple, ],
        'documentnummer': typing.Union[DocumentnummerSchema, str, ],
        'documentnummer[in]': typing.Union[DocumentnummerInSchema, list, tuple, ],
        'documentnummer[isempty]': typing.Union[DocumentnummerIsemptySchema, bool, ],
        'documentnummer[isnull]': typing.Union[DocumentnummerIsnullSchema, bool, ],
        'documentnummer[like]': typing.Union[DocumentnummerLikeSchema, str, ],
        'documentnummer[not]': typing.Union[DocumentnummerNotSchema, list, tuple, ],
        'eindGeldigheid': typing.Union[EindGeldigheidSchema, str, datetime, ],
        'eindGeldigheid[gt]': typing.Union[EindGeldigheidGtSchema, str, datetime, ],
        'eindGeldigheid[gte]': typing.Union[EindGeldigheidGteSchema, str, datetime, ],
        'eindGeldigheid[in]': typing.Union[EindGeldigheidInSchema, list, tuple, ],
        'eindGeldigheid[isnull]': typing.Union[EindGeldigheidIsnullSchema, bool, ],
        'eindGeldigheid[lt]': typing.Union[EindGeldigheidLtSchema, str, datetime, ],
        'eindGeldigheid[lte]': typing.Union[EindGeldigheidLteSchema, str, datetime, ],
        'eindGeldigheid[not]': typing.Union[EindGeldigheidNotSchema, list, tuple, ],
        'eindRegistratie': typing.Union[EindRegistratieSchema, str, datetime, ],
        'eindRegistratie[gt]': typing.Union[EindRegistratieGtSchema, str, datetime, ],
        'eindRegistratie[gte]': typing.Union[EindRegistratieGteSchema, str, datetime, ],
        'eindRegistratie[in]': typing.Union[EindRegistratieInSchema, list, tuple, ],
        'eindRegistratie[isnull]': typing.Union[EindRegistratieIsnullSchema, bool, ],
        'eindRegistratie[lt]': typing.Union[EindRegistratieLtSchema, str, datetime, ],
        'eindRegistratie[lte]': typing.Union[EindRegistratieLteSchema, str, datetime, ],
        'eindRegistratie[not]': typing.Union[EindRegistratieNotSchema, list, tuple, ],
        'geldigOp': typing.Union[GeldigOpSchema, str, datetime, ],
        'geldigOp[gt]': typing.Union[GeldigOpGtSchema, str, datetime, ],
        'geldigOp[gte]': typing.Union[GeldigOpGteSchema, str, datetime, ],
        'geldigOp[in]': typing.Union[GeldigOpInSchema, str, datetime, ],
        'geldigOp[isnull]': typing.Union[GeldigOpIsnullSchema, str, datetime, ],
        'geldigOp[lt]': typing.Union[GeldigOpLtSchema, str, datetime, ],
        'geldigOp[lte]': typing.Union[GeldigOpLteSchema, str, datetime, ],
        'geldigOp[not]': typing.Union[GeldigOpNotSchema, str, datetime, ],
        'id': typing.Union[IdSchema, str, ],
        'id[in]': typing.Union[IdInSchema, list, tuple, ],
        'id[isempty]': typing.Union[IdIsemptySchema, bool, ],
        'id[isnull]': typing.Union[IdIsnullSchema, bool, ],
        'id[like]': typing.Union[IdLikeSchema, str, ],
        'id[not]': typing.Union[IdNotSchema, list, tuple, ],
        'identificatie': typing.Union[IdentificatieSchema, str, ],
        'identificatie[in]': typing.Union[IdentificatieInSchema, list, tuple, ],
        'identificatie[isempty]': typing.Union[IdentificatieIsemptySchema, bool, ],
        'identificatie[isnull]': typing.Union[IdentificatieIsnullSchema, bool, ],
        'identificatie[like]': typing.Union[IdentificatieLikeSchema, str, ],
        'identificatie[not]': typing.Union[IdentificatieNotSchema, list, tuple, ],
        'inOnderzoek': typing.Union[InOnderzoekSchema, str, ],
        'inOnderzoek[in]': typing.Union[InOnderzoekInSchema, list, tuple, ],
        'inOnderzoek[isempty]': typing.Union[InOnderzoekIsemptySchema, bool, ],
        'inOnderzoek[isnull]': typing.Union[InOnderzoekIsnullSchema, bool, ],
        'inOnderzoek[like]': typing.Union[InOnderzoekLikeSchema, str, ],
        'inOnderzoek[not]': typing.Union[InOnderzoekNotSchema, list, tuple, ],
        'kenmerk': typing.Union[KenmerkSchema, str, ],
        'kenmerk[in]': typing.Union[KenmerkInSchema, list, tuple, ],
        'kenmerk[isempty]': typing.Union[KenmerkIsemptySchema, bool, ],
        'kenmerk[isnull]': typing.Union[KenmerkIsnullSchema, bool, ],
        'kenmerk[like]': typing.Union[KenmerkLikeSchema, str, ],
        'kenmerk[not]': typing.Union[KenmerkNotSchema, list, tuple, ],
        'objectIdentificatie': typing.Union[ObjectIdentificatieSchema, str, ],
        'objectIdentificatie[in]': typing.Union[ObjectIdentificatieInSchema, list, tuple, ],
        'objectIdentificatie[isempty]': typing.Union[ObjectIdentificatieIsemptySchema, bool, ],
        'objectIdentificatie[isnull]': typing.Union[ObjectIdentificatieIsnullSchema, bool, ],
        'objectIdentificatie[like]': typing.Union[ObjectIdentificatieLikeSchema, str, ],
        'objectIdentificatie[not]': typing.Union[ObjectIdentificatieNotSchema, list, tuple, ],
        'objecttype': typing.Union[ObjecttypeSchema, str, ],
        'objecttype[in]': typing.Union[ObjecttypeInSchema, list, tuple, ],
        'objecttype[isempty]': typing.Union[ObjecttypeIsemptySchema, bool, ],
        'objecttype[isnull]': typing.Union[ObjecttypeIsnullSchema, bool, ],
        'objecttype[like]': typing.Union[ObjecttypeLikeSchema, str, ],
        'objecttype[not]': typing.Union[ObjecttypeNotSchema, list, tuple, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'registratiedatum': typing.Union[RegistratiedatumSchema, str, datetime, ],
        'registratiedatum[gt]': typing.Union[RegistratiedatumGtSchema, str, datetime, ],
        'registratiedatum[gte]': typing.Union[RegistratiedatumGteSchema, str, datetime, ],
        'registratiedatum[in]': typing.Union[RegistratiedatumInSchema, list, tuple, ],
        'registratiedatum[isnull]': typing.Union[RegistratiedatumIsnullSchema, bool, ],
        'registratiedatum[lt]': typing.Union[RegistratiedatumLtSchema, str, datetime, ],
        'registratiedatum[lte]': typing.Union[RegistratiedatumLteSchema, str, datetime, ],
        'registratiedatum[not]': typing.Union[RegistratiedatumNotSchema, list, tuple, ],
        'tijdstipRegistratie': typing.Union[TijdstipRegistratieSchema, str, datetime, ],
        'tijdstipRegistratie[gt]': typing.Union[TijdstipRegistratieGtSchema, str, datetime, ],
        'tijdstipRegistratie[gte]': typing.Union[TijdstipRegistratieGteSchema, str, datetime, ],
        'tijdstipRegistratie[in]': typing.Union[TijdstipRegistratieInSchema, list, tuple, ],
        'tijdstipRegistratie[isnull]': typing.Union[TijdstipRegistratieIsnullSchema, bool, ],
        'tijdstipRegistratie[lt]': typing.Union[TijdstipRegistratieLtSchema, str, datetime, ],
        'tijdstipRegistratie[lte]': typing.Union[TijdstipRegistratieLteSchema, str, datetime, ],
        'tijdstipRegistratie[not]': typing.Union[TijdstipRegistratieNotSchema, list, tuple, ],
        'volgnummer': typing.Union[VolgnummerSchema, decimal.Decimal, int, ],
        'volgnummer[gt]': typing.Union[VolgnummerGtSchema, decimal.Decimal, int, ],
        'volgnummer[gte]': typing.Union[VolgnummerGteSchema, decimal.Decimal, int, ],
        'volgnummer[in]': typing.Union[VolgnummerInSchema, list, tuple, ],
        'volgnummer[isnull]': typing.Union[VolgnummerIsnullSchema, bool, ],
        'volgnummer[lt]': typing.Union[VolgnummerLtSchema, decimal.Decimal, int, ],
        'volgnummer[lte]': typing.Union[VolgnummerLteSchema, decimal.Decimal, int, ],
        'volgnummer[not]': typing.Union[VolgnummerNotSchema, list, tuple, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_count = api_client.QueryParameter(
    name="_count",
    style=api_client.ParameterStyle.FORM,
    schema=CountSchema,
    explode=True,
)
request_query_expand = api_client.QueryParameter(
    name="_expand",
    style=api_client.ParameterStyle.FORM,
    schema=ExpandSchema,
    explode=True,
)
request_query_expand_scope = api_client.QueryParameter(
    name="_expandScope",
    style=api_client.ParameterStyle.FORM,
    schema=ExpandScopeSchema,
    explode=True,
)
request_query_fields = api_client.QueryParameter(
    name="_fields",
    style=api_client.ParameterStyle.FORM,
    schema=FieldsSchema,
    explode=True,
)
request_query_format = api_client.QueryParameter(
    name="_format",
    style=api_client.ParameterStyle.FORM,
    schema=FormatSchema,
    explode=True,
)
request_query_page_size = api_client.QueryParameter(
    name="_pageSize",
    style=api_client.ParameterStyle.FORM,
    schema=PageSizeSchema,
    explode=True,
)
request_query_sort = api_client.QueryParameter(
    name="_sort",
    style=api_client.ParameterStyle.FORM,
    schema=SortSchema,
    explode=True,
)
request_query_begin_geldigheid = api_client.QueryParameter(
    name="beginGeldigheid",
    style=api_client.ParameterStyle.FORM,
    schema=BeginGeldigheidSchema,
    explode=True,
)
request_query_begin_geldigheid_gt = api_client.QueryParameter(
    name="beginGeldigheid[gt]",
    style=api_client.ParameterStyle.FORM,
    schema=BeginGeldigheidGtSchema,
    explode=True,
)
request_query_begin_geldigheid_gte = api_client.QueryParameter(
    name="beginGeldigheid[gte]",
    style=api_client.ParameterStyle.FORM,
    schema=BeginGeldigheidGteSchema,
    explode=True,
)
request_query_begin_geldigheid_in = api_client.QueryParameter(
    name="beginGeldigheid[in]",
    style=api_client.ParameterStyle.FORM,
    schema=BeginGeldigheidInSchema,
)
request_query_begin_geldigheid_isnull = api_client.QueryParameter(
    name="beginGeldigheid[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=BeginGeldigheidIsnullSchema,
    explode=True,
)
request_query_begin_geldigheid_lt = api_client.QueryParameter(
    name="beginGeldigheid[lt]",
    style=api_client.ParameterStyle.FORM,
    schema=BeginGeldigheidLtSchema,
    explode=True,
)
request_query_begin_geldigheid_lte = api_client.QueryParameter(
    name="beginGeldigheid[lte]",
    style=api_client.ParameterStyle.FORM,
    schema=BeginGeldigheidLteSchema,
    explode=True,
)
request_query_begin_geldigheid_not = api_client.QueryParameter(
    name="beginGeldigheid[not]",
    style=api_client.ParameterStyle.FORM,
    schema=BeginGeldigheidNotSchema,
    explode=True,
)
request_query_documentdatum = api_client.QueryParameter(
    name="documentdatum",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentdatumSchema,
    explode=True,
)
request_query_documentdatum_gt = api_client.QueryParameter(
    name="documentdatum[gt]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentdatumGtSchema,
    explode=True,
)
request_query_documentdatum_gte = api_client.QueryParameter(
    name="documentdatum[gte]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentdatumGteSchema,
    explode=True,
)
request_query_documentdatum_in = api_client.QueryParameter(
    name="documentdatum[in]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentdatumInSchema,
)
request_query_documentdatum_isnull = api_client.QueryParameter(
    name="documentdatum[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentdatumIsnullSchema,
    explode=True,
)
request_query_documentdatum_lt = api_client.QueryParameter(
    name="documentdatum[lt]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentdatumLtSchema,
    explode=True,
)
request_query_documentdatum_lte = api_client.QueryParameter(
    name="documentdatum[lte]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentdatumLteSchema,
    explode=True,
)
request_query_documentdatum_not = api_client.QueryParameter(
    name="documentdatum[not]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentdatumNotSchema,
    explode=True,
)
request_query_documentnummer = api_client.QueryParameter(
    name="documentnummer",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentnummerSchema,
    explode=True,
)
request_query_documentnummer_in = api_client.QueryParameter(
    name="documentnummer[in]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentnummerInSchema,
)
request_query_documentnummer_isempty = api_client.QueryParameter(
    name="documentnummer[isempty]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentnummerIsemptySchema,
    explode=True,
)
request_query_documentnummer_isnull = api_client.QueryParameter(
    name="documentnummer[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentnummerIsnullSchema,
    explode=True,
)
request_query_documentnummer_like = api_client.QueryParameter(
    name="documentnummer[like]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentnummerLikeSchema,
    explode=True,
)
request_query_documentnummer_not = api_client.QueryParameter(
    name="documentnummer[not]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentnummerNotSchema,
    explode=True,
)
request_query_eind_geldigheid = api_client.QueryParameter(
    name="eindGeldigheid",
    style=api_client.ParameterStyle.FORM,
    schema=EindGeldigheidSchema,
    explode=True,
)
request_query_eind_geldigheid_gt = api_client.QueryParameter(
    name="eindGeldigheid[gt]",
    style=api_client.ParameterStyle.FORM,
    schema=EindGeldigheidGtSchema,
    explode=True,
)
request_query_eind_geldigheid_gte = api_client.QueryParameter(
    name="eindGeldigheid[gte]",
    style=api_client.ParameterStyle.FORM,
    schema=EindGeldigheidGteSchema,
    explode=True,
)
request_query_eind_geldigheid_in = api_client.QueryParameter(
    name="eindGeldigheid[in]",
    style=api_client.ParameterStyle.FORM,
    schema=EindGeldigheidInSchema,
)
request_query_eind_geldigheid_isnull = api_client.QueryParameter(
    name="eindGeldigheid[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=EindGeldigheidIsnullSchema,
    explode=True,
)
request_query_eind_geldigheid_lt = api_client.QueryParameter(
    name="eindGeldigheid[lt]",
    style=api_client.ParameterStyle.FORM,
    schema=EindGeldigheidLtSchema,
    explode=True,
)
request_query_eind_geldigheid_lte = api_client.QueryParameter(
    name="eindGeldigheid[lte]",
    style=api_client.ParameterStyle.FORM,
    schema=EindGeldigheidLteSchema,
    explode=True,
)
request_query_eind_geldigheid_not = api_client.QueryParameter(
    name="eindGeldigheid[not]",
    style=api_client.ParameterStyle.FORM,
    schema=EindGeldigheidNotSchema,
    explode=True,
)
request_query_eind_registratie = api_client.QueryParameter(
    name="eindRegistratie",
    style=api_client.ParameterStyle.FORM,
    schema=EindRegistratieSchema,
    explode=True,
)
request_query_eind_registratie_gt = api_client.QueryParameter(
    name="eindRegistratie[gt]",
    style=api_client.ParameterStyle.FORM,
    schema=EindRegistratieGtSchema,
    explode=True,
)
request_query_eind_registratie_gte = api_client.QueryParameter(
    name="eindRegistratie[gte]",
    style=api_client.ParameterStyle.FORM,
    schema=EindRegistratieGteSchema,
    explode=True,
)
request_query_eind_registratie_in = api_client.QueryParameter(
    name="eindRegistratie[in]",
    style=api_client.ParameterStyle.FORM,
    schema=EindRegistratieInSchema,
)
request_query_eind_registratie_isnull = api_client.QueryParameter(
    name="eindRegistratie[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=EindRegistratieIsnullSchema,
    explode=True,
)
request_query_eind_registratie_lt = api_client.QueryParameter(
    name="eindRegistratie[lt]",
    style=api_client.ParameterStyle.FORM,
    schema=EindRegistratieLtSchema,
    explode=True,
)
request_query_eind_registratie_lte = api_client.QueryParameter(
    name="eindRegistratie[lte]",
    style=api_client.ParameterStyle.FORM,
    schema=EindRegistratieLteSchema,
    explode=True,
)
request_query_eind_registratie_not = api_client.QueryParameter(
    name="eindRegistratie[not]",
    style=api_client.ParameterStyle.FORM,
    schema=EindRegistratieNotSchema,
    explode=True,
)
request_query_geldig_op = api_client.QueryParameter(
    name="geldigOp",
    style=api_client.ParameterStyle.FORM,
    schema=GeldigOpSchema,
    explode=True,
)
request_query_geldig_op_gt = api_client.QueryParameter(
    name="geldigOp[gt]",
    style=api_client.ParameterStyle.FORM,
    schema=GeldigOpGtSchema,
    explode=True,
)
request_query_geldig_op_gte = api_client.QueryParameter(
    name="geldigOp[gte]",
    style=api_client.ParameterStyle.FORM,
    schema=GeldigOpGteSchema,
    explode=True,
)
request_query_geldig_op_in = api_client.QueryParameter(
    name="geldigOp[in]",
    style=api_client.ParameterStyle.FORM,
    schema=GeldigOpInSchema,
    explode=True,
)
request_query_geldig_op_isnull = api_client.QueryParameter(
    name="geldigOp[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=GeldigOpIsnullSchema,
    explode=True,
)
request_query_geldig_op_lt = api_client.QueryParameter(
    name="geldigOp[lt]",
    style=api_client.ParameterStyle.FORM,
    schema=GeldigOpLtSchema,
    explode=True,
)
request_query_geldig_op_lte = api_client.QueryParameter(
    name="geldigOp[lte]",
    style=api_client.ParameterStyle.FORM,
    schema=GeldigOpLteSchema,
    explode=True,
)
request_query_geldig_op_not = api_client.QueryParameter(
    name="geldigOp[not]",
    style=api_client.ParameterStyle.FORM,
    schema=GeldigOpNotSchema,
    explode=True,
)
request_query_id = api_client.QueryParameter(
    name="id",
    style=api_client.ParameterStyle.FORM,
    schema=IdSchema,
    explode=True,
)
request_query_id_in = api_client.QueryParameter(
    name="id[in]",
    style=api_client.ParameterStyle.FORM,
    schema=IdInSchema,
)
request_query_id_isempty = api_client.QueryParameter(
    name="id[isempty]",
    style=api_client.ParameterStyle.FORM,
    schema=IdIsemptySchema,
    explode=True,
)
request_query_id_isnull = api_client.QueryParameter(
    name="id[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=IdIsnullSchema,
    explode=True,
)
request_query_id_like = api_client.QueryParameter(
    name="id[like]",
    style=api_client.ParameterStyle.FORM,
    schema=IdLikeSchema,
    explode=True,
)
request_query_id_not = api_client.QueryParameter(
    name="id[not]",
    style=api_client.ParameterStyle.FORM,
    schema=IdNotSchema,
    explode=True,
)
request_query_identificatie = api_client.QueryParameter(
    name="identificatie",
    style=api_client.ParameterStyle.FORM,
    schema=IdentificatieSchema,
    explode=True,
)
request_query_identificatie_in = api_client.QueryParameter(
    name="identificatie[in]",
    style=api_client.ParameterStyle.FORM,
    schema=IdentificatieInSchema,
)
request_query_identificatie_isempty = api_client.QueryParameter(
    name="identificatie[isempty]",
    style=api_client.ParameterStyle.FORM,
    schema=IdentificatieIsemptySchema,
    explode=True,
)
request_query_identificatie_isnull = api_client.QueryParameter(
    name="identificatie[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=IdentificatieIsnullSchema,
    explode=True,
)
request_query_identificatie_like = api_client.QueryParameter(
    name="identificatie[like]",
    style=api_client.ParameterStyle.FORM,
    schema=IdentificatieLikeSchema,
    explode=True,
)
request_query_identificatie_not = api_client.QueryParameter(
    name="identificatie[not]",
    style=api_client.ParameterStyle.FORM,
    schema=IdentificatieNotSchema,
    explode=True,
)
request_query_in_onderzoek = api_client.QueryParameter(
    name="inOnderzoek",
    style=api_client.ParameterStyle.FORM,
    schema=InOnderzoekSchema,
    explode=True,
)
request_query_in_onderzoek_in = api_client.QueryParameter(
    name="inOnderzoek[in]",
    style=api_client.ParameterStyle.FORM,
    schema=InOnderzoekInSchema,
)
request_query_in_onderzoek_isempty = api_client.QueryParameter(
    name="inOnderzoek[isempty]",
    style=api_client.ParameterStyle.FORM,
    schema=InOnderzoekIsemptySchema,
    explode=True,
)
request_query_in_onderzoek_isnull = api_client.QueryParameter(
    name="inOnderzoek[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=InOnderzoekIsnullSchema,
    explode=True,
)
request_query_in_onderzoek_like = api_client.QueryParameter(
    name="inOnderzoek[like]",
    style=api_client.ParameterStyle.FORM,
    schema=InOnderzoekLikeSchema,
    explode=True,
)
request_query_in_onderzoek_not = api_client.QueryParameter(
    name="inOnderzoek[not]",
    style=api_client.ParameterStyle.FORM,
    schema=InOnderzoekNotSchema,
    explode=True,
)
request_query_kenmerk = api_client.QueryParameter(
    name="kenmerk",
    style=api_client.ParameterStyle.FORM,
    schema=KenmerkSchema,
    explode=True,
)
request_query_kenmerk_in = api_client.QueryParameter(
    name="kenmerk[in]",
    style=api_client.ParameterStyle.FORM,
    schema=KenmerkInSchema,
)
request_query_kenmerk_isempty = api_client.QueryParameter(
    name="kenmerk[isempty]",
    style=api_client.ParameterStyle.FORM,
    schema=KenmerkIsemptySchema,
    explode=True,
)
request_query_kenmerk_isnull = api_client.QueryParameter(
    name="kenmerk[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=KenmerkIsnullSchema,
    explode=True,
)
request_query_kenmerk_like = api_client.QueryParameter(
    name="kenmerk[like]",
    style=api_client.ParameterStyle.FORM,
    schema=KenmerkLikeSchema,
    explode=True,
)
request_query_kenmerk_not = api_client.QueryParameter(
    name="kenmerk[not]",
    style=api_client.ParameterStyle.FORM,
    schema=KenmerkNotSchema,
    explode=True,
)
request_query_object_identificatie = api_client.QueryParameter(
    name="objectIdentificatie",
    style=api_client.ParameterStyle.FORM,
    schema=ObjectIdentificatieSchema,
    explode=True,
)
request_query_object_identificatie_in = api_client.QueryParameter(
    name="objectIdentificatie[in]",
    style=api_client.ParameterStyle.FORM,
    schema=ObjectIdentificatieInSchema,
)
request_query_object_identificatie_isempty = api_client.QueryParameter(
    name="objectIdentificatie[isempty]",
    style=api_client.ParameterStyle.FORM,
    schema=ObjectIdentificatieIsemptySchema,
    explode=True,
)
request_query_object_identificatie_isnull = api_client.QueryParameter(
    name="objectIdentificatie[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=ObjectIdentificatieIsnullSchema,
    explode=True,
)
request_query_object_identificatie_like = api_client.QueryParameter(
    name="objectIdentificatie[like]",
    style=api_client.ParameterStyle.FORM,
    schema=ObjectIdentificatieLikeSchema,
    explode=True,
)
request_query_object_identificatie_not = api_client.QueryParameter(
    name="objectIdentificatie[not]",
    style=api_client.ParameterStyle.FORM,
    schema=ObjectIdentificatieNotSchema,
    explode=True,
)
request_query_objecttype = api_client.QueryParameter(
    name="objecttype",
    style=api_client.ParameterStyle.FORM,
    schema=ObjecttypeSchema,
    explode=True,
)
request_query_objecttype_in = api_client.QueryParameter(
    name="objecttype[in]",
    style=api_client.ParameterStyle.FORM,
    schema=ObjecttypeInSchema,
)
request_query_objecttype_isempty = api_client.QueryParameter(
    name="objecttype[isempty]",
    style=api_client.ParameterStyle.FORM,
    schema=ObjecttypeIsemptySchema,
    explode=True,
)
request_query_objecttype_isnull = api_client.QueryParameter(
    name="objecttype[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=ObjecttypeIsnullSchema,
    explode=True,
)
request_query_objecttype_like = api_client.QueryParameter(
    name="objecttype[like]",
    style=api_client.ParameterStyle.FORM,
    schema=ObjecttypeLikeSchema,
    explode=True,
)
request_query_objecttype_not = api_client.QueryParameter(
    name="objecttype[not]",
    style=api_client.ParameterStyle.FORM,
    schema=ObjecttypeNotSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_registratiedatum = api_client.QueryParameter(
    name="registratiedatum",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumSchema,
    explode=True,
)
request_query_registratiedatum_gt = api_client.QueryParameter(
    name="registratiedatum[gt]",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumGtSchema,
    explode=True,
)
request_query_registratiedatum_gte = api_client.QueryParameter(
    name="registratiedatum[gte]",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumGteSchema,
    explode=True,
)
request_query_registratiedatum_in = api_client.QueryParameter(
    name="registratiedatum[in]",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumInSchema,
)
request_query_registratiedatum_isnull = api_client.QueryParameter(
    name="registratiedatum[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumIsnullSchema,
    explode=True,
)
request_query_registratiedatum_lt = api_client.QueryParameter(
    name="registratiedatum[lt]",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumLtSchema,
    explode=True,
)
request_query_registratiedatum_lte = api_client.QueryParameter(
    name="registratiedatum[lte]",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumLteSchema,
    explode=True,
)
request_query_registratiedatum_not = api_client.QueryParameter(
    name="registratiedatum[not]",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumNotSchema,
    explode=True,
)
request_query_tijdstip_registratie = api_client.QueryParameter(
    name="tijdstipRegistratie",
    style=api_client.ParameterStyle.FORM,
    schema=TijdstipRegistratieSchema,
    explode=True,
)
request_query_tijdstip_registratie_gt = api_client.QueryParameter(
    name="tijdstipRegistratie[gt]",
    style=api_client.ParameterStyle.FORM,
    schema=TijdstipRegistratieGtSchema,
    explode=True,
)
request_query_tijdstip_registratie_gte = api_client.QueryParameter(
    name="tijdstipRegistratie[gte]",
    style=api_client.ParameterStyle.FORM,
    schema=TijdstipRegistratieGteSchema,
    explode=True,
)
request_query_tijdstip_registratie_in = api_client.QueryParameter(
    name="tijdstipRegistratie[in]",
    style=api_client.ParameterStyle.FORM,
    schema=TijdstipRegistratieInSchema,
)
request_query_tijdstip_registratie_isnull = api_client.QueryParameter(
    name="tijdstipRegistratie[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=TijdstipRegistratieIsnullSchema,
    explode=True,
)
request_query_tijdstip_registratie_lt = api_client.QueryParameter(
    name="tijdstipRegistratie[lt]",
    style=api_client.ParameterStyle.FORM,
    schema=TijdstipRegistratieLtSchema,
    explode=True,
)
request_query_tijdstip_registratie_lte = api_client.QueryParameter(
    name="tijdstipRegistratie[lte]",
    style=api_client.ParameterStyle.FORM,
    schema=TijdstipRegistratieLteSchema,
    explode=True,
)
request_query_tijdstip_registratie_not = api_client.QueryParameter(
    name="tijdstipRegistratie[not]",
    style=api_client.ParameterStyle.FORM,
    schema=TijdstipRegistratieNotSchema,
    explode=True,
)
request_query_volgnummer = api_client.QueryParameter(
    name="volgnummer",
    style=api_client.ParameterStyle.FORM,
    schema=VolgnummerSchema,
    explode=True,
)
request_query_volgnummer_gt = api_client.QueryParameter(
    name="volgnummer[gt]",
    style=api_client.ParameterStyle.FORM,
    schema=VolgnummerGtSchema,
    explode=True,
)
request_query_volgnummer_gte = api_client.QueryParameter(
    name="volgnummer[gte]",
    style=api_client.ParameterStyle.FORM,
    schema=VolgnummerGteSchema,
    explode=True,
)
request_query_volgnummer_in = api_client.QueryParameter(
    name="volgnummer[in]",
    style=api_client.ParameterStyle.FORM,
    schema=VolgnummerInSchema,
)
request_query_volgnummer_isnull = api_client.QueryParameter(
    name="volgnummer[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=VolgnummerIsnullSchema,
    explode=True,
)
request_query_volgnummer_lt = api_client.QueryParameter(
    name="volgnummer[lt]",
    style=api_client.ParameterStyle.FORM,
    schema=VolgnummerLtSchema,
    explode=True,
)
request_query_volgnummer_lte = api_client.QueryParameter(
    name="volgnummer[lte]",
    style=api_client.ParameterStyle.FORM,
    schema=VolgnummerLteSchema,
    explode=True,
)
request_query_volgnummer_not = api_client.QueryParameter(
    name="volgnummer[not]",
    style=api_client.ParameterStyle.FORM,
    schema=VolgnummerNotSchema,
    explode=True,
)
# Header params
AcceptCrsSchema = schemas.StrSchema
ContentCrsSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'Accept-Crs': typing.Union[AcceptCrsSchema, str, ],
        'Content-Crs': typing.Union[ContentCrsSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_accept_crs = api_client.HeaderParameter(
    name="Accept-Crs",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AcceptCrsSchema,
)
request_header_content_crs = api_client.HeaderParameter(
    name="Content-Crs",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ContentCrsSchema,
)
_auth = [
    'oauth2',
]
SchemaFor200ResponseBodyApplicationHaljson = PaginatedBagonderzoekenList
SchemaFor200ResponseBodyTextCsv = PaginatedBagonderzoekenList
SchemaFor200ResponseBodyApplicationGeojson = PaginatedBagonderzoekenList


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationHaljson,
        SchemaFor200ResponseBodyTextCsv,
        SchemaFor200ResponseBodyApplicationGeojson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/hal+json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationHaljson),
        'text/csv': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextCsv),
        'application/geo+json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationGeojson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/hal+json',
    'text/csv',
    'application/geo+json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _bag_onderzoeken_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _bag_onderzoeken_list_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _bag_onderzoeken_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _bag_onderzoeken_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_count,
            request_query_expand,
            request_query_expand_scope,
            request_query_fields,
            request_query_format,
            request_query_page_size,
            request_query_sort,
            request_query_begin_geldigheid,
            request_query_begin_geldigheid_gt,
            request_query_begin_geldigheid_gte,
            request_query_begin_geldigheid_in,
            request_query_begin_geldigheid_isnull,
            request_query_begin_geldigheid_lt,
            request_query_begin_geldigheid_lte,
            request_query_begin_geldigheid_not,
            request_query_documentdatum,
            request_query_documentdatum_gt,
            request_query_documentdatum_gte,
            request_query_documentdatum_in,
            request_query_documentdatum_isnull,
            request_query_documentdatum_lt,
            request_query_documentdatum_lte,
            request_query_documentdatum_not,
            request_query_documentnummer,
            request_query_documentnummer_in,
            request_query_documentnummer_isempty,
            request_query_documentnummer_isnull,
            request_query_documentnummer_like,
            request_query_documentnummer_not,
            request_query_eind_geldigheid,
            request_query_eind_geldigheid_gt,
            request_query_eind_geldigheid_gte,
            request_query_eind_geldigheid_in,
            request_query_eind_geldigheid_isnull,
            request_query_eind_geldigheid_lt,
            request_query_eind_geldigheid_lte,
            request_query_eind_geldigheid_not,
            request_query_eind_registratie,
            request_query_eind_registratie_gt,
            request_query_eind_registratie_gte,
            request_query_eind_registratie_in,
            request_query_eind_registratie_isnull,
            request_query_eind_registratie_lt,
            request_query_eind_registratie_lte,
            request_query_eind_registratie_not,
            request_query_geldig_op,
            request_query_geldig_op_gt,
            request_query_geldig_op_gte,
            request_query_geldig_op_in,
            request_query_geldig_op_isnull,
            request_query_geldig_op_lt,
            request_query_geldig_op_lte,
            request_query_geldig_op_not,
            request_query_id,
            request_query_id_in,
            request_query_id_isempty,
            request_query_id_isnull,
            request_query_id_like,
            request_query_id_not,
            request_query_identificatie,
            request_query_identificatie_in,
            request_query_identificatie_isempty,
            request_query_identificatie_isnull,
            request_query_identificatie_like,
            request_query_identificatie_not,
            request_query_in_onderzoek,
            request_query_in_onderzoek_in,
            request_query_in_onderzoek_isempty,
            request_query_in_onderzoek_isnull,
            request_query_in_onderzoek_like,
            request_query_in_onderzoek_not,
            request_query_kenmerk,
            request_query_kenmerk_in,
            request_query_kenmerk_isempty,
            request_query_kenmerk_isnull,
            request_query_kenmerk_like,
            request_query_kenmerk_not,
            request_query_object_identificatie,
            request_query_object_identificatie_in,
            request_query_object_identificatie_isempty,
            request_query_object_identificatie_isnull,
            request_query_object_identificatie_like,
            request_query_object_identificatie_not,
            request_query_objecttype,
            request_query_objecttype_in,
            request_query_objecttype_isempty,
            request_query_objecttype_isnull,
            request_query_objecttype_like,
            request_query_objecttype_not,
            request_query_page,
            request_query_registratiedatum,
            request_query_registratiedatum_gt,
            request_query_registratiedatum_gte,
            request_query_registratiedatum_in,
            request_query_registratiedatum_isnull,
            request_query_registratiedatum_lt,
            request_query_registratiedatum_lte,
            request_query_registratiedatum_not,
            request_query_tijdstip_registratie,
            request_query_tijdstip_registratie_gt,
            request_query_tijdstip_registratie_gte,
            request_query_tijdstip_registratie_in,
            request_query_tijdstip_registratie_isnull,
            request_query_tijdstip_registratie_lt,
            request_query_tijdstip_registratie_lte,
            request_query_tijdstip_registratie_not,
            request_query_volgnummer,
            request_query_volgnummer_gt,
            request_query_volgnummer_gte,
            request_query_volgnummer_in,
            request_query_volgnummer_isnull,
            request_query_volgnummer_lt,
            request_query_volgnummer_lte,
            request_query_volgnummer_not,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_accept_crs,
            request_header_content_crs,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class BagOnderzoekenList(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def bag_onderzoeken_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def bag_onderzoeken_list(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def bag_onderzoeken_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def bag_onderzoeken_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._bag_onderzoeken_list_oapg(
            query_params=query_params,
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._bag_onderzoeken_list_oapg(
            query_params=query_params,
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


