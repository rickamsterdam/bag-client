# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from openapi_client.model.paginated_bagbrondocumenten_list import PaginatedBagbrondocumentenList

from . import path

# Query params
CountSchema = schemas.BoolSchema
ExpandSchema = schemas.BoolSchema
ExpandScopeSchema = schemas.StrSchema
FieldsSchema = schemas.StrSchema


class FormatSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "json": "JSON",
            "csv": "CSV",
            "geojson": "GEOJSON",
        }
    
    @schemas.classproperty
    def JSON(cls):
        return cls("json")
    
    @schemas.classproperty
    def CSV(cls):
        return cls("csv")
    
    @schemas.classproperty
    def GEOJSON(cls):
        return cls("geojson")
PageSizeSchema = schemas.IntSchema
SortSchema = schemas.StrSchema
BronleverancierCodeSchema = schemas.StrSchema


class BronleverancierCodeInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'BronleverancierCodeInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
BronleverancierCodeIsemptySchema = schemas.BoolSchema
BronleverancierCodeIsnullSchema = schemas.BoolSchema
BronleverancierCodeLikeSchema = schemas.StrSchema


class BronleverancierCodeNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'BronleverancierCodeNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
BronleverancierOmschrijvingSchema = schemas.StrSchema


class BronleverancierOmschrijvingInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'BronleverancierOmschrijvingInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
BronleverancierOmschrijvingIsemptySchema = schemas.BoolSchema
BronleverancierOmschrijvingIsnullSchema = schemas.BoolSchema
BronleverancierOmschrijvingLikeSchema = schemas.StrSchema


class BronleverancierOmschrijvingNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'BronleverancierOmschrijvingNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
DocumentnummerSchema = schemas.StrSchema


class DocumentnummerInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DocumentnummerInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
DocumentnummerIsemptySchema = schemas.BoolSchema
DocumentnummerIsnullSchema = schemas.BoolSchema
DocumentnummerLikeSchema = schemas.StrSchema


class DocumentnummerNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DocumentnummerNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
PageSchema = schemas.IntSchema
RegistratiedatumSchema = schemas.DateTimeSchema
RegistratiedatumGtSchema = schemas.DateTimeSchema
RegistratiedatumGteSchema = schemas.DateTimeSchema


class RegistratiedatumInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.DateTimeSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, datetime, ]], typing.List[typing.Union[MetaOapg.items, str, datetime, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RegistratiedatumInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
RegistratiedatumIsnullSchema = schemas.BoolSchema
RegistratiedatumLtSchema = schemas.DateTimeSchema
RegistratiedatumLteSchema = schemas.DateTimeSchema


class RegistratiedatumNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.DateTimeSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, datetime, ]], typing.List[typing.Union[MetaOapg.items, str, datetime, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RegistratiedatumNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
TypeBrondocumentCodeSchema = schemas.StrSchema


class TypeBrondocumentCodeInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TypeBrondocumentCodeInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
TypeBrondocumentCodeIsemptySchema = schemas.BoolSchema
TypeBrondocumentCodeIsnullSchema = schemas.BoolSchema
TypeBrondocumentCodeLikeSchema = schemas.StrSchema


class TypeBrondocumentCodeNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TypeBrondocumentCodeNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
TypeBrondocumentOmschrijvingSchema = schemas.StrSchema


class TypeBrondocumentOmschrijvingInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TypeBrondocumentOmschrijvingInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
TypeBrondocumentOmschrijvingIsemptySchema = schemas.BoolSchema
TypeBrondocumentOmschrijvingIsnullSchema = schemas.BoolSchema
TypeBrondocumentOmschrijvingLikeSchema = schemas.StrSchema


class TypeBrondocumentOmschrijvingNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TypeBrondocumentOmschrijvingNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
TypeDossierCodeSchema = schemas.StrSchema


class TypeDossierCodeInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TypeDossierCodeInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
TypeDossierCodeIsemptySchema = schemas.BoolSchema
TypeDossierCodeIsnullSchema = schemas.BoolSchema
TypeDossierCodeLikeSchema = schemas.StrSchema


class TypeDossierCodeNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TypeDossierCodeNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
TypeDossierOmschrijvingSchema = schemas.StrSchema


class TypeDossierOmschrijvingInSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TypeDossierOmschrijvingInSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
TypeDossierOmschrijvingIsemptySchema = schemas.BoolSchema
TypeDossierOmschrijvingIsnullSchema = schemas.BoolSchema
TypeDossierOmschrijvingLikeSchema = schemas.StrSchema


class TypeDossierOmschrijvingNotSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TypeDossierOmschrijvingNotSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        '_count': typing.Union[CountSchema, bool, ],
        '_expand': typing.Union[ExpandSchema, bool, ],
        '_expandScope': typing.Union[ExpandScopeSchema, str, ],
        '_fields': typing.Union[FieldsSchema, str, ],
        '_format': typing.Union[FormatSchema, str, ],
        '_pageSize': typing.Union[PageSizeSchema, decimal.Decimal, int, ],
        '_sort': typing.Union[SortSchema, str, ],
        'bronleverancierCode': typing.Union[BronleverancierCodeSchema, str, ],
        'bronleverancierCode[in]': typing.Union[BronleverancierCodeInSchema, list, tuple, ],
        'bronleverancierCode[isempty]': typing.Union[BronleverancierCodeIsemptySchema, bool, ],
        'bronleverancierCode[isnull]': typing.Union[BronleverancierCodeIsnullSchema, bool, ],
        'bronleverancierCode[like]': typing.Union[BronleverancierCodeLikeSchema, str, ],
        'bronleverancierCode[not]': typing.Union[BronleverancierCodeNotSchema, list, tuple, ],
        'bronleverancierOmschrijving': typing.Union[BronleverancierOmschrijvingSchema, str, ],
        'bronleverancierOmschrijving[in]': typing.Union[BronleverancierOmschrijvingInSchema, list, tuple, ],
        'bronleverancierOmschrijving[isempty]': typing.Union[BronleverancierOmschrijvingIsemptySchema, bool, ],
        'bronleverancierOmschrijving[isnull]': typing.Union[BronleverancierOmschrijvingIsnullSchema, bool, ],
        'bronleverancierOmschrijving[like]': typing.Union[BronleverancierOmschrijvingLikeSchema, str, ],
        'bronleverancierOmschrijving[not]': typing.Union[BronleverancierOmschrijvingNotSchema, list, tuple, ],
        'documentnummer': typing.Union[DocumentnummerSchema, str, ],
        'documentnummer[in]': typing.Union[DocumentnummerInSchema, list, tuple, ],
        'documentnummer[isempty]': typing.Union[DocumentnummerIsemptySchema, bool, ],
        'documentnummer[isnull]': typing.Union[DocumentnummerIsnullSchema, bool, ],
        'documentnummer[like]': typing.Union[DocumentnummerLikeSchema, str, ],
        'documentnummer[not]': typing.Union[DocumentnummerNotSchema, list, tuple, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'registratiedatum': typing.Union[RegistratiedatumSchema, str, datetime, ],
        'registratiedatum[gt]': typing.Union[RegistratiedatumGtSchema, str, datetime, ],
        'registratiedatum[gte]': typing.Union[RegistratiedatumGteSchema, str, datetime, ],
        'registratiedatum[in]': typing.Union[RegistratiedatumInSchema, list, tuple, ],
        'registratiedatum[isnull]': typing.Union[RegistratiedatumIsnullSchema, bool, ],
        'registratiedatum[lt]': typing.Union[RegistratiedatumLtSchema, str, datetime, ],
        'registratiedatum[lte]': typing.Union[RegistratiedatumLteSchema, str, datetime, ],
        'registratiedatum[not]': typing.Union[RegistratiedatumNotSchema, list, tuple, ],
        'typeBrondocumentCode': typing.Union[TypeBrondocumentCodeSchema, str, ],
        'typeBrondocumentCode[in]': typing.Union[TypeBrondocumentCodeInSchema, list, tuple, ],
        'typeBrondocumentCode[isempty]': typing.Union[TypeBrondocumentCodeIsemptySchema, bool, ],
        'typeBrondocumentCode[isnull]': typing.Union[TypeBrondocumentCodeIsnullSchema, bool, ],
        'typeBrondocumentCode[like]': typing.Union[TypeBrondocumentCodeLikeSchema, str, ],
        'typeBrondocumentCode[not]': typing.Union[TypeBrondocumentCodeNotSchema, list, tuple, ],
        'typeBrondocumentOmschrijving': typing.Union[TypeBrondocumentOmschrijvingSchema, str, ],
        'typeBrondocumentOmschrijving[in]': typing.Union[TypeBrondocumentOmschrijvingInSchema, list, tuple, ],
        'typeBrondocumentOmschrijving[isempty]': typing.Union[TypeBrondocumentOmschrijvingIsemptySchema, bool, ],
        'typeBrondocumentOmschrijving[isnull]': typing.Union[TypeBrondocumentOmschrijvingIsnullSchema, bool, ],
        'typeBrondocumentOmschrijving[like]': typing.Union[TypeBrondocumentOmschrijvingLikeSchema, str, ],
        'typeBrondocumentOmschrijving[not]': typing.Union[TypeBrondocumentOmschrijvingNotSchema, list, tuple, ],
        'typeDossierCode': typing.Union[TypeDossierCodeSchema, str, ],
        'typeDossierCode[in]': typing.Union[TypeDossierCodeInSchema, list, tuple, ],
        'typeDossierCode[isempty]': typing.Union[TypeDossierCodeIsemptySchema, bool, ],
        'typeDossierCode[isnull]': typing.Union[TypeDossierCodeIsnullSchema, bool, ],
        'typeDossierCode[like]': typing.Union[TypeDossierCodeLikeSchema, str, ],
        'typeDossierCode[not]': typing.Union[TypeDossierCodeNotSchema, list, tuple, ],
        'typeDossierOmschrijving': typing.Union[TypeDossierOmschrijvingSchema, str, ],
        'typeDossierOmschrijving[in]': typing.Union[TypeDossierOmschrijvingInSchema, list, tuple, ],
        'typeDossierOmschrijving[isempty]': typing.Union[TypeDossierOmschrijvingIsemptySchema, bool, ],
        'typeDossierOmschrijving[isnull]': typing.Union[TypeDossierOmschrijvingIsnullSchema, bool, ],
        'typeDossierOmschrijving[like]': typing.Union[TypeDossierOmschrijvingLikeSchema, str, ],
        'typeDossierOmschrijving[not]': typing.Union[TypeDossierOmschrijvingNotSchema, list, tuple, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_count = api_client.QueryParameter(
    name="_count",
    style=api_client.ParameterStyle.FORM,
    schema=CountSchema,
    explode=True,
)
request_query_expand = api_client.QueryParameter(
    name="_expand",
    style=api_client.ParameterStyle.FORM,
    schema=ExpandSchema,
    explode=True,
)
request_query_expand_scope = api_client.QueryParameter(
    name="_expandScope",
    style=api_client.ParameterStyle.FORM,
    schema=ExpandScopeSchema,
    explode=True,
)
request_query_fields = api_client.QueryParameter(
    name="_fields",
    style=api_client.ParameterStyle.FORM,
    schema=FieldsSchema,
    explode=True,
)
request_query_format = api_client.QueryParameter(
    name="_format",
    style=api_client.ParameterStyle.FORM,
    schema=FormatSchema,
    explode=True,
)
request_query_page_size = api_client.QueryParameter(
    name="_pageSize",
    style=api_client.ParameterStyle.FORM,
    schema=PageSizeSchema,
    explode=True,
)
request_query_sort = api_client.QueryParameter(
    name="_sort",
    style=api_client.ParameterStyle.FORM,
    schema=SortSchema,
    explode=True,
)
request_query_bronleverancier_code = api_client.QueryParameter(
    name="bronleverancierCode",
    style=api_client.ParameterStyle.FORM,
    schema=BronleverancierCodeSchema,
    explode=True,
)
request_query_bronleverancier_code_in = api_client.QueryParameter(
    name="bronleverancierCode[in]",
    style=api_client.ParameterStyle.FORM,
    schema=BronleverancierCodeInSchema,
)
request_query_bronleverancier_code_isempty = api_client.QueryParameter(
    name="bronleverancierCode[isempty]",
    style=api_client.ParameterStyle.FORM,
    schema=BronleverancierCodeIsemptySchema,
    explode=True,
)
request_query_bronleverancier_code_isnull = api_client.QueryParameter(
    name="bronleverancierCode[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=BronleverancierCodeIsnullSchema,
    explode=True,
)
request_query_bronleverancier_code_like = api_client.QueryParameter(
    name="bronleverancierCode[like]",
    style=api_client.ParameterStyle.FORM,
    schema=BronleverancierCodeLikeSchema,
    explode=True,
)
request_query_bronleverancier_code_not = api_client.QueryParameter(
    name="bronleverancierCode[not]",
    style=api_client.ParameterStyle.FORM,
    schema=BronleverancierCodeNotSchema,
    explode=True,
)
request_query_bronleverancier_omschrijving = api_client.QueryParameter(
    name="bronleverancierOmschrijving",
    style=api_client.ParameterStyle.FORM,
    schema=BronleverancierOmschrijvingSchema,
    explode=True,
)
request_query_bronleverancier_omschrijving_in = api_client.QueryParameter(
    name="bronleverancierOmschrijving[in]",
    style=api_client.ParameterStyle.FORM,
    schema=BronleverancierOmschrijvingInSchema,
)
request_query_bronleverancier_omschrijving_isempty = api_client.QueryParameter(
    name="bronleverancierOmschrijving[isempty]",
    style=api_client.ParameterStyle.FORM,
    schema=BronleverancierOmschrijvingIsemptySchema,
    explode=True,
)
request_query_bronleverancier_omschrijving_isnull = api_client.QueryParameter(
    name="bronleverancierOmschrijving[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=BronleverancierOmschrijvingIsnullSchema,
    explode=True,
)
request_query_bronleverancier_omschrijving_like = api_client.QueryParameter(
    name="bronleverancierOmschrijving[like]",
    style=api_client.ParameterStyle.FORM,
    schema=BronleverancierOmschrijvingLikeSchema,
    explode=True,
)
request_query_bronleverancier_omschrijving_not = api_client.QueryParameter(
    name="bronleverancierOmschrijving[not]",
    style=api_client.ParameterStyle.FORM,
    schema=BronleverancierOmschrijvingNotSchema,
    explode=True,
)
request_query_documentnummer = api_client.QueryParameter(
    name="documentnummer",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentnummerSchema,
    explode=True,
)
request_query_documentnummer_in = api_client.QueryParameter(
    name="documentnummer[in]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentnummerInSchema,
)
request_query_documentnummer_isempty = api_client.QueryParameter(
    name="documentnummer[isempty]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentnummerIsemptySchema,
    explode=True,
)
request_query_documentnummer_isnull = api_client.QueryParameter(
    name="documentnummer[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentnummerIsnullSchema,
    explode=True,
)
request_query_documentnummer_like = api_client.QueryParameter(
    name="documentnummer[like]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentnummerLikeSchema,
    explode=True,
)
request_query_documentnummer_not = api_client.QueryParameter(
    name="documentnummer[not]",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentnummerNotSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_registratiedatum = api_client.QueryParameter(
    name="registratiedatum",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumSchema,
    explode=True,
)
request_query_registratiedatum_gt = api_client.QueryParameter(
    name="registratiedatum[gt]",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumGtSchema,
    explode=True,
)
request_query_registratiedatum_gte = api_client.QueryParameter(
    name="registratiedatum[gte]",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumGteSchema,
    explode=True,
)
request_query_registratiedatum_in = api_client.QueryParameter(
    name="registratiedatum[in]",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumInSchema,
)
request_query_registratiedatum_isnull = api_client.QueryParameter(
    name="registratiedatum[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumIsnullSchema,
    explode=True,
)
request_query_registratiedatum_lt = api_client.QueryParameter(
    name="registratiedatum[lt]",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumLtSchema,
    explode=True,
)
request_query_registratiedatum_lte = api_client.QueryParameter(
    name="registratiedatum[lte]",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumLteSchema,
    explode=True,
)
request_query_registratiedatum_not = api_client.QueryParameter(
    name="registratiedatum[not]",
    style=api_client.ParameterStyle.FORM,
    schema=RegistratiedatumNotSchema,
    explode=True,
)
request_query_type_brondocument_code = api_client.QueryParameter(
    name="typeBrondocumentCode",
    style=api_client.ParameterStyle.FORM,
    schema=TypeBrondocumentCodeSchema,
    explode=True,
)
request_query_type_brondocument_code_in = api_client.QueryParameter(
    name="typeBrondocumentCode[in]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeBrondocumentCodeInSchema,
)
request_query_type_brondocument_code_isempty = api_client.QueryParameter(
    name="typeBrondocumentCode[isempty]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeBrondocumentCodeIsemptySchema,
    explode=True,
)
request_query_type_brondocument_code_isnull = api_client.QueryParameter(
    name="typeBrondocumentCode[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeBrondocumentCodeIsnullSchema,
    explode=True,
)
request_query_type_brondocument_code_like = api_client.QueryParameter(
    name="typeBrondocumentCode[like]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeBrondocumentCodeLikeSchema,
    explode=True,
)
request_query_type_brondocument_code_not = api_client.QueryParameter(
    name="typeBrondocumentCode[not]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeBrondocumentCodeNotSchema,
    explode=True,
)
request_query_type_brondocument_omschrijving = api_client.QueryParameter(
    name="typeBrondocumentOmschrijving",
    style=api_client.ParameterStyle.FORM,
    schema=TypeBrondocumentOmschrijvingSchema,
    explode=True,
)
request_query_type_brondocument_omschrijving_in = api_client.QueryParameter(
    name="typeBrondocumentOmschrijving[in]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeBrondocumentOmschrijvingInSchema,
)
request_query_type_brondocument_omschrijving_isempty = api_client.QueryParameter(
    name="typeBrondocumentOmschrijving[isempty]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeBrondocumentOmschrijvingIsemptySchema,
    explode=True,
)
request_query_type_brondocument_omschrijving_isnull = api_client.QueryParameter(
    name="typeBrondocumentOmschrijving[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeBrondocumentOmschrijvingIsnullSchema,
    explode=True,
)
request_query_type_brondocument_omschrijving_like = api_client.QueryParameter(
    name="typeBrondocumentOmschrijving[like]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeBrondocumentOmschrijvingLikeSchema,
    explode=True,
)
request_query_type_brondocument_omschrijving_not = api_client.QueryParameter(
    name="typeBrondocumentOmschrijving[not]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeBrondocumentOmschrijvingNotSchema,
    explode=True,
)
request_query_type_dossier_code = api_client.QueryParameter(
    name="typeDossierCode",
    style=api_client.ParameterStyle.FORM,
    schema=TypeDossierCodeSchema,
    explode=True,
)
request_query_type_dossier_code_in = api_client.QueryParameter(
    name="typeDossierCode[in]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeDossierCodeInSchema,
)
request_query_type_dossier_code_isempty = api_client.QueryParameter(
    name="typeDossierCode[isempty]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeDossierCodeIsemptySchema,
    explode=True,
)
request_query_type_dossier_code_isnull = api_client.QueryParameter(
    name="typeDossierCode[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeDossierCodeIsnullSchema,
    explode=True,
)
request_query_type_dossier_code_like = api_client.QueryParameter(
    name="typeDossierCode[like]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeDossierCodeLikeSchema,
    explode=True,
)
request_query_type_dossier_code_not = api_client.QueryParameter(
    name="typeDossierCode[not]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeDossierCodeNotSchema,
    explode=True,
)
request_query_type_dossier_omschrijving = api_client.QueryParameter(
    name="typeDossierOmschrijving",
    style=api_client.ParameterStyle.FORM,
    schema=TypeDossierOmschrijvingSchema,
    explode=True,
)
request_query_type_dossier_omschrijving_in = api_client.QueryParameter(
    name="typeDossierOmschrijving[in]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeDossierOmschrijvingInSchema,
)
request_query_type_dossier_omschrijving_isempty = api_client.QueryParameter(
    name="typeDossierOmschrijving[isempty]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeDossierOmschrijvingIsemptySchema,
    explode=True,
)
request_query_type_dossier_omschrijving_isnull = api_client.QueryParameter(
    name="typeDossierOmschrijving[isnull]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeDossierOmschrijvingIsnullSchema,
    explode=True,
)
request_query_type_dossier_omschrijving_like = api_client.QueryParameter(
    name="typeDossierOmschrijving[like]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeDossierOmschrijvingLikeSchema,
    explode=True,
)
request_query_type_dossier_omschrijving_not = api_client.QueryParameter(
    name="typeDossierOmschrijving[not]",
    style=api_client.ParameterStyle.FORM,
    schema=TypeDossierOmschrijvingNotSchema,
    explode=True,
)
# Header params
AcceptCrsSchema = schemas.StrSchema
ContentCrsSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'Accept-Crs': typing.Union[AcceptCrsSchema, str, ],
        'Content-Crs': typing.Union[ContentCrsSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_accept_crs = api_client.HeaderParameter(
    name="Accept-Crs",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AcceptCrsSchema,
)
request_header_content_crs = api_client.HeaderParameter(
    name="Content-Crs",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ContentCrsSchema,
)
_auth = [
    'oauth2',
]
SchemaFor200ResponseBodyApplicationHaljson = PaginatedBagbrondocumentenList
SchemaFor200ResponseBodyTextCsv = PaginatedBagbrondocumentenList
SchemaFor200ResponseBodyApplicationGeojson = PaginatedBagbrondocumentenList


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationHaljson,
        SchemaFor200ResponseBodyTextCsv,
        SchemaFor200ResponseBodyApplicationGeojson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/hal+json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationHaljson),
        'text/csv': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextCsv),
        'application/geo+json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationGeojson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/hal+json',
    'text/csv',
    'application/geo+json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _bag_brondocumenten_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _bag_brondocumenten_list_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _bag_brondocumenten_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _bag_brondocumenten_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_count,
            request_query_expand,
            request_query_expand_scope,
            request_query_fields,
            request_query_format,
            request_query_page_size,
            request_query_sort,
            request_query_bronleverancier_code,
            request_query_bronleverancier_code_in,
            request_query_bronleverancier_code_isempty,
            request_query_bronleverancier_code_isnull,
            request_query_bronleverancier_code_like,
            request_query_bronleverancier_code_not,
            request_query_bronleverancier_omschrijving,
            request_query_bronleverancier_omschrijving_in,
            request_query_bronleverancier_omschrijving_isempty,
            request_query_bronleverancier_omschrijving_isnull,
            request_query_bronleverancier_omschrijving_like,
            request_query_bronleverancier_omschrijving_not,
            request_query_documentnummer,
            request_query_documentnummer_in,
            request_query_documentnummer_isempty,
            request_query_documentnummer_isnull,
            request_query_documentnummer_like,
            request_query_documentnummer_not,
            request_query_page,
            request_query_registratiedatum,
            request_query_registratiedatum_gt,
            request_query_registratiedatum_gte,
            request_query_registratiedatum_in,
            request_query_registratiedatum_isnull,
            request_query_registratiedatum_lt,
            request_query_registratiedatum_lte,
            request_query_registratiedatum_not,
            request_query_type_brondocument_code,
            request_query_type_brondocument_code_in,
            request_query_type_brondocument_code_isempty,
            request_query_type_brondocument_code_isnull,
            request_query_type_brondocument_code_like,
            request_query_type_brondocument_code_not,
            request_query_type_brondocument_omschrijving,
            request_query_type_brondocument_omschrijving_in,
            request_query_type_brondocument_omschrijving_isempty,
            request_query_type_brondocument_omschrijving_isnull,
            request_query_type_brondocument_omschrijving_like,
            request_query_type_brondocument_omschrijving_not,
            request_query_type_dossier_code,
            request_query_type_dossier_code_in,
            request_query_type_dossier_code_isempty,
            request_query_type_dossier_code_isnull,
            request_query_type_dossier_code_like,
            request_query_type_dossier_code_not,
            request_query_type_dossier_omschrijving,
            request_query_type_dossier_omschrijving_in,
            request_query_type_dossier_omschrijving_isempty,
            request_query_type_dossier_omschrijving_isnull,
            request_query_type_dossier_omschrijving_like,
            request_query_type_dossier_omschrijving_not,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_accept_crs,
            request_header_content_crs,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class BagBrondocumentenList(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def bag_brondocumenten_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def bag_brondocumenten_list(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def bag_brondocumenten_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def bag_brondocumenten_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._bag_brondocumenten_list_oapg(
            query_params=query_params,
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._bag_brondocumenten_list_oapg(
            query_params=query_params,
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


