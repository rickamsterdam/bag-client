# coding: utf-8

"""
    bag

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: datapunt@amsterdam.nl
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Geometry(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    GeoJSON geometry
    """


    class MetaOapg:
        required = {
            "type",
        }
        
        @staticmethod
        def discriminator():
            return {
                'type': {
                    'LineString': LineString,
                    'MultiLineString': MultiLineString,
                    'MultiPoint': MultiPoint,
                    'MultiPolygon': MultiPolygon,
                    'Point': Point,
                    'Polygon': Polygon,
                }
            }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def POINT(cls):
                    return cls("Point")
                
                @schemas.classproperty
                def LINE_STRING(cls):
                    return cls("LineString")
                
                @schemas.classproperty
                def POLYGON(cls):
                    return cls("Polygon")
                
                @schemas.classproperty
                def MULTI_POINT(cls):
                    return cls("MultiPoint")
                
                @schemas.classproperty
                def MULTI_LINE_STRING(cls):
                    return cls("MultiLineString")
                
                @schemas.classproperty
                def MULTI_POLYGON(cls):
                    return cls("MultiPolygon")
            
            
            class coordinates(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.NumberSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'coordinates':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "type": type,
                "coordinates": coordinates,
            }
    
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coordinates"]) -> MetaOapg.properties.coordinates: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "coordinates", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coordinates"]) -> typing.Union[MetaOapg.properties.coordinates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "coordinates", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        coordinates: typing.Union[MetaOapg.properties.coordinates, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Geometry':
        return super().__new__(
            cls,
            *_args,
            type=type,
            coordinates=coordinates,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.line_string import LineString
from openapi_client.model.multi_line_string import MultiLineString
from openapi_client.model.multi_point import MultiPoint
from openapi_client.model.multi_polygon import MultiPolygon
from openapi_client.model.point import Point
from openapi_client.model.polygon import Polygon
